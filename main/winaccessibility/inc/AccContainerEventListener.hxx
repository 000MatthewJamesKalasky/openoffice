/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright IBM Corporation 2010.
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __ACCCONTAINEREVENTLISTENERHXX
#define __ACCCONTAINEREVENTLISTENERHXX

#include <stdio.h>
#include "AccEventListener.hxx"
#include <com/sun/star/accessibility/XAccessibleEventListener.hpp>
#include <com/sun/star/accessibility/XAccessible.hpp>

using namespace ::com::sun::star::uno;

/**
 * AccContainerEventListener is inherited from AccEventListener. It handles the evnets
 * generated by container controls. The accessible roles are: CANVAS, COMBO_BOX, DOCUMENT, 
 * EMBEDDED_OBJECT, END_NOTE, FILLER, FOOTNOTE, FOOTER, GRAPHIC, HEADER, LAYERED_PANE, 
 * MENU_BAR, POPUP_MENU, OPTION_PANE, PAGE_TAB, PAGE_TAB_LIST, PANEL, SCROLL_PANE, SPLIT_PANE, 
 * STATUS_BAR, TABLE_CELL, TEXT_FRAME, TOOL_BAR, VIEW_PORT.
 * It defines the procedure of specific event handling related with containsers and provides 
 * the detailed support for some related methods.  
 */
class AccContainerEventListener: public AccEventListener
{
public:
    AccContainerEventListener(com::sun::star::accessibility::XAccessible* pAcc, AccObjectManagerAgent* Agent);
    virtual ~AccContainerEventListener();

    //AccessibleEventListener
    virtual void SAL_CALL notifyEvent( const ::com::sun::star::accessibility::AccessibleEventObject& aEvent ) throw (::com::sun::star::uno::RuntimeException);

    //for child changed event
    virtual void SAL_CALL handleChildChangedEvent(Any oldValue, Any newValue);

    //for selection changed event
    virtual void SAL_CALL handleSelectionChangedEvent(const Any &oldValue, const Any &newValue);

    //for all children changed event
    virtual void SAL_CALL handleAllChildrenChangedEvent();

    //for text changed event
    virtual void SAL_CALL handleTextChangedEvent(Any oldValue, Any newValue);
    virtual void SAL_CALL handleStateChangedEvent(Any oldValue, Any newValue);

    //for visible data changed event
    virtual void SAL_CALL handleVisibleDataChangedEvent();

    //for bound rect changed event
    virtual void SAL_CALL handleBoundrectChangedEvent();

    //for value changed event
    virtual void SAL_CALL handleValueChangedEvent(Any oldValue, Any newValue);

    //state changed
    virtual void SAL_CALL setComponentState(short state, bool enable);
    virtual void SAL_CALL fireStatePropertyChange(short state, bool set
                                                     );
    virtual void SAL_CALL fireStateFocusdChange(bool enable);
    virtual bool SAL_CALL IsEditable(Reference<com::sun::star::accessibility::XAccessibleContext> xContext);

    // update all children's state
    void SAL_CALL UpdateAllChildrenState( com::sun::star::accessibility::XAccessible* pXAccessible );

    bool NotifyChildEvent(short nWinEvent,const Any &Value);

    virtual void handleSelectionChangedAddEvent(const Any &oldValue, const Any &newValue);
    virtual void handleSelectionChangedRemoveEvent(const Any &oldValue, const Any &newValue);
    virtual void handleSelectionChangedWithinEvent(const Any &oldValue, const Any &newValue);

    virtual void handlePageChangedEvent (const Any &oldValue, const Any &newValue);

    virtual void handleSectionChangedEvent (const Any &oldValue, const Any &newValue);
    virtual void handleColumnChangedEvent (const Any &oldValue, const Any &newValue);
	//IAccessibility2 Implementation 2009-----
	//for name changed event
    virtual void SAL_CALL handleNameChangedEvent(Any name);
	//-----IAccessibility2 Implementation 2009
};

#endif
